[["index.html", "CMDB Bootcamp 1 Homepage", " CMDB Bootcamp 1 Homepage This is the course homepage and digital textbook for CMDB Bootcamp. 1.0.0.1 Instructors Rajiv McCoy, rajiv.mccoy[at]jhu.edu Mike Sauria, mike.sauria[at]jhu.edu Fred Tan, tan[at]ciwemb.edu 1.0.0.2 Schedule &amp; Logistics Class is Tuesdays from 3-3:50PM, in UTL G89. Please bring your laptop with you to every class. Session Content Session 1: The reference genome &amp; genome browsers Session 2: De novo mutations Session 3: Linkage disequilibrium Session 4: Simulating evolution Session 5: Population structure – part I Session 6: Population structure – part II Session 7: Genome-wide association studies – part I Session 8: Genome-wide association studies – part II Session 9: Scans for selection – part I Session 10: Scans for selection – part II Session 11: Archaic admixture Session 12: Gene expression Session 13: Coronavirus phylogenetics "],["the-unix-shell.html", "2 The Unix Shell ", " 2 The Unix Shell "],["introducing-the-shell.html", "2.1 Introducing the Shell", " 2.1 Introducing the Shell "],["navigating-files-and-directories.html", "2.2 Navigating Files and Directories", " 2.2 Navigating Files and Directories "],["working-with-files-and-directories.html", "2.3 Working with Files and Directories", " 2.3 Working with Files and Directories "],["python.html", "3 Python ", " 3 Python "],["data-types-variables-math.html", "3.1 Data Types, Variables, Math", " 3.1 Data Types, Variables, Math 3.1.1 Types of Data Integers Integers are whole numbers, without a decimal point. For example: 2 -3 0 Floats Floats are numbers with a decimal point. For example: 1.2 -3.0 26/3 (This one doesn’t actually have a decimal point written in by me, but is a float because the expression evaluates to 8.666) Strings Strings are character data enclosed by single ’ or double ” quotation marks. Any text enclosed by quotes will be treated as a string. “My Grandpa’s deck has no pathetic cards” ‘85.3’ Note the second example – 85.3 is a float; \"85.3\" is a string. Booleans A Boolean has two possible values: True and False. These can be expressed interchangeably as 1 or 0, respectively. 3.1.2 Variables A variable is assigned using the equals sign, with this general syntax: variable_name = value. For example: composer = \"buxtehude\" year = 1637 The data name can be almost anything. Here are the rules to consider when naming a variable: A variable name must start with a letter or underscore A variable name can only consist of letters, numbers, or underscores Variables are case sensitive (i.e. Python would interpret my_number, MY_NUMBER, and My_Number as different variables) Python has a set of “reserved words” that cannot be used as variable names. These are words that already have a set meaning in Python, such as ‘True’, ‘False’, ‘for’, and ‘if’. A full list can be found here: https://www.programiz.com/python-programming/keywords-identifier 3.1.3 Mathematical Operations A lot of mathematical operations in Python are straightforward. Here are some of the basic operations we can perform + and - – addition and subtraction * and / – multiplication and division ** – Exponentials We can perform mathematical operations on values directly: print(2 + 3) ## 5 or we can operate on variables: myValue = 4 print(myValue**2) ## 16 Mathematical conversions will automatically convert integers to floats when appropriate: print(3 + 2.2) ## 5.2 We can save the output of an expression as a variable: my_product = 2 * 10 print(my_product) ## 20 And likewise we can perform mathematical operations on variables, provided these variables store numeric data: number1 = 7 print(number1 / 2) ## 3.5 3.1.4 Order of operations Python follows the usual mathematical order of operations. And like usual in math, we can use parenthesis () to enforce a specific order. print(6 - 7 * 2 + (8-4) * 4) ## 8 3.1.5 Comparisons In Python, comparisons will always return a Boolean, i.e. either True or False. We can use the following syntax to compare values: &lt; and &gt; to compare greater than/less than &lt;= and &gt;= for greater than or equal to/less than or equal to For example: print(5.3 &lt; 17) ## True print(4. &gt;= (8/2)) ## True == checks if two values are equal. != checks that two values are different. print((2**3) != (17 - 9)) ## False Note that a single equals sign = is used to assign values. So var1 = 3 is setting var1 equal to 3. However, a double equals sign == is used to compare values. var1 == 3 is checking if the value of var1 is 3. "],["built-in-functions-and-methods.html", "3.2 Built-In Functions and Methods", " 3.2 Built-In Functions and Methods 3.2.1 Functions A function is a block of code that performs a task. Python comes with a substantial set of pre-written functions. Text on how a function is formulated - name, parentheses, optionally arguments Is it worth talking about named arguments or positional arguments. Be introspective about this For example, the print() function displays FINISH ME OTHER Built-In FUNCTIONS’ 3.2.2 Methods Every data type that we use in Python (that is, strings, integers, etc.) is associated with a set of functions unique to the data type. These functions are called methods. The syntax for using a method is as follows: &lt;objectName&gt;.&lt;methodName&gt;(). For example, the method .upper() belongs to strings and is used to convert a string into capital letters. We can use it with any string either directly on the string itself: &quot;Quod est superius est sicut quod inferius&quot;.upper() ## &#39;QUOD EST SUPERIUS EST SICUT QUOD INFERIUS&#39; or by operating on a variable: pig = &quot;peppa&quot; pig.upper() ## &#39;PEPPA&#39; Using a method may or not modify the underlying object. For example, the .upper() method shows you the uppercase version of a string but does not modify the actual variable that you are operating on. Observe the following code block: pig = &quot;peppa&quot; pig.upper() ## &#39;PEPPA&#39; print(pig) ## peppa When we use the upper method on pig, we do not actually make a change to pig itself. To save the uppercase version of pig, we need to use variable assignment, for example as such: pig = &quot;peppa&quot; pig = pig.upper() print(pig) ## PEPPA Some methods operate differently. For example, the list .append() method which we will learn about does modify the underlying variable, so in the following code block: myList = [] myList.append(&#39;apple&#39;) the line myList.append('apple') does actually modify myList, so there’s no need to type something like myList = myList.append('apple') (this would in fact be an error). This is something you’ll have to keep track of on a case-by-case basis as you learn new methods. "],["string-methods.html", "3.3 String Methods", " 3.3 String Methods 3.3.0.1 .upper() and .lower() 3.3.0.2 .split() 3.3.0.3 .join() 3.3.0.4 .strip() "],["lists.html", "3.4 Lists", " 3.4 Lists TEST "],["for-loops.html", "3.5 For Loops", " 3.5 For Loops "],["modules.html", "3.6 Modules", " 3.6 Modules Often, we need to make use of functions beyond those that are packaged with Python. To do this, we can import a module, or a collection of pre-written functions. A module is imported with the following syntax: import &lt;module name&gt;. For example, to import the popular plotting module Matplotlib, we write: import matplotlib.pyplot To use a function from this module, we need to reference both the package name and the function name, with the general syntax: moduleName.functionName(). To user Matplotlib’s show() function, we would write: matplotlib.pyplot.show() What if you don’t want to write out matplotlib.pyplot in full each time that you run a Matplotlib function? To simplify this, we can give our modules a shorthand name. For example: import matplotlib.pyplot as plt Now, instead of writing out matplotlib.pyplot, we can just write plt. The previous matplotlib.pyplot.show() command is shortened to: plt.show() "],["plotting.html", "3.7 Plotting", " 3.7 Plotting In this course, we will use the library Matplotlib for plotting. For concision, we will import the matplotlib.pyplot module with the name plt, as such: import matplotlib.pyplot as plt "],["errors.html", "3.8 Errors", " 3.8 Errors "],["git.html", "4 Git ", " 4 Git "],["tracking-changes.html", "4.1 Tracking Changes", " 4.1 Tracking Changes "],["ignoring-things.html", "4.2 Ignoring Things", " 4.2 Ignoring Things "],["authors.html", "Authors", " Authors     Credits Names Pedagogy Instructor Rajiv McCoy Content Author Stephanie Yan Content Author Kate Weaver Website Template Jeff Leek &amp; The Johns Hopkins Data Science Lab Design Inspiration Ali Madooei &amp; JHU Data Structures Funding JHU Center for Educational Resources Techology Fellowship Grant   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.5 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2023-08-08 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.5) ## bookdown 0.24 2023-03-28 [1] Github (rstudio/bookdown@88bc4ea) ## bslib 0.4.2 2022-12-16 [1] CRAN (R 4.0.2) ## cachem 1.0.7 2023-02-24 [1] CRAN (R 4.0.2) ## callr 3.5.0 2020-10-08 [1] RSPM (R 4.0.2) ## cli 3.6.1 2023-03-23 [1] CRAN (R 4.0.2) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.20 2023-01-17 [1] CRAN (R 4.0.2) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fastmap 1.1.1 2023-02-24 [1] CRAN (R 4.0.2) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.4.2 2020-08-27 [1] RSPM (R 4.0.5) ## here 1.0.1 2020-12-13 [1] CRAN (R 4.0.2) ## hms 0.5.3 2020-01-08 [1] RSPM (R 4.0.0) ## htmltools 0.5.5 2023-03-23 [1] CRAN (R 4.0.2) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## jsonlite 1.7.1 2020-09-07 [1] RSPM (R 4.0.2) ## knitr 1.33 2023-03-28 [1] Github (yihui/knitr@a1052d1) ## lattice 0.20-41 2020-04-02 [2] CRAN (R 4.0.2) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.0.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.0.2) ## Matrix 1.2-18 2019-11-27 [2] CRAN (R 4.0.2) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.0.2) ## ottrpal 1.0.1 2023-03-28 [1] Github (jhudsl/ottrpal@151e412) ## pillar 1.9.0 2023-03-22 [1] CRAN (R 4.0.2) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgconfig 2.0.3 2019-09-22 [1] RSPM (R 4.0.3) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## png 0.1-8 2022-11-29 [1] CRAN (R 4.0.2) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.4.0 2020-10-07 [1] RSPM (R 4.0.2) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## rappdirs 0.3.3 2021-01-31 [1] CRAN (R 4.0.2) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.0.2) ## readr 1.4.0 2020-10-05 [1] RSPM (R 4.0.2) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## reticulate 1.28 2023-01-27 [1] CRAN (R 4.0.2) ## rlang 1.1.0 2023-03-14 [1] CRAN (R 4.0.2) ## rmarkdown 2.10 2023-03-28 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.3 2022-04-02 [1] CRAN (R 4.0.2) ## rstudioapi 0.11 2020-02-07 [1] RSPM (R 4.0.0) ## sass 0.4.5 2023-01-24 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2023-03-28 [1] Github (R-lib/testthat@e99155a) ## tibble 3.2.1 2023-03-20 [1] CRAN (R 4.0.2) ## usethis 1.6.3 2020-09-17 [1] RSPM (R 4.0.2) ## utf8 1.1.4 2018-05-24 [1] RSPM (R 4.0.3) ## vctrs 0.6.1 2023-03-22 [1] CRAN (R 4.0.2) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2023-03-28 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
